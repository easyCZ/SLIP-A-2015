Change tables from fiugure to Table later on

Figure 1 - take-away box conaining bullet point version of specifications.
Figure 2 - flow-chart outlining the step structure
Figure 3 - table of all methods
Figure 4 - BPM maths
Figure 5 - BPM formula adjustment due to per100
Figure 6 - timeline for data window
Figure 7 - table containing criticisim of 3 cases.
Figure 8 - Take-away box with goals for testing.
	1) Determine optimal setting
	2) Determine quality of BPM code
	3) Graph effect of changing iter_windowITALICS length
	4) Graph effect of changing min_spacingITALICS
	5) Graph effect of changing data window length
Figure 9 - Set thing
Figure 10 - Testing Environment Specifications
	1) The testing environment has to be in a seperate file.
	2) The testing environment has to emulate the moving window when it goes through test data.
	3) The testing environment needs to be able to export results.
	4) The testing environment needs to pass settings to services.py
	5) The testing environment needs to receive information about the evaluation of each data window it passed to services.py.
Figure 11 - Testing Environment Diagram - INFORMATION ABOUT EVALUATION details needed
Figure 12 - Information passed from services.py to local.py
self.data = data
	1) window length in time as well as data points
	2) window density (data points per second)
	3) BPM code setting (methods, benchmarks)
	4) Maximum, minimum, average and variance of voltstamps
	5) Percentage of iter_windowsITALICS used
	6) BPM
	7) Beat times and voltstamps

Figure 13 - PROs and CONs of different f_hat(x)
TABLE Index | Measure | PROs | CONs
1|
Measure: |Number of beats in window - actual number of beats in window|
PROs: Computationally inexpensive. Little manual work.
CONs: Tells us nothing about the spacing of beats.
2|
Measure: |BPM - actual BPM|
PROs: Measures number of beats and recognises uneven spacing.
CONs: Systematic error from error adjustment is carried through. Fluctuations in actual BPM either have to be ignored or entered manually. The real beats do not have to be detected because it is only the spacing of them that matters. Different 'violations' carry different weights.
3|
Measure: avg(|ti - actual ti|)
PROs: Would give most accurate measure if beats found by code are very close to actual beats.
CONs: Infeasible because it requires manual input of actual this. The number of actual and false beats may not be the same, leading to scoring complications.

Figure 14 - Error bounds for BPM as measure
TABLE Index | Issue | Error | Explanation
1|
Issue: Systematic Error from error adjustment
Error Bound: Copy from 1st table HELP
Explanation: Result was taken from before.
Issue: Fluctuations in the actual BPM
Error Bound: HELP calculations 2.
Explanation: In reality the heart rate changes constantly. The 'actual' BPM used for testing is an average, so it is not entirely accurate. Variations were less than one beat per 5 seconds.

Figure 15 - Variations in impact on quality measure
TABLE Index | Scenario | Impact in case of dense iteration of data windows | Impact in case of sparse iteration of data windows
1| 
Scenario: Ommission of beat
Sparse: If the ommitted beat is outside of t1 and tn HELP (where t1 and tn are as in Figure 6ITALICS) it has no impact on the result. If it is inside it causes an error of HELP.
Dense: Since the moving window only changes slightly in each iteration, this beat will be ommitted from a number (approximately equal to the number of data points in a each window) of data windows. We see that the average error in these windows is HELP.
2|
Scenario: Shift of one beat
Sparse: Inside t1 and tn HELP there is no change, outside the change is HELP.
Dense: The average change is HELP
3|
Scenario: Addition of one beat
Sparse: HELP
Dense:  Bounded by inside sparse

Figure 16 - Tested methods. Justifying why others were removed.
Figure 17 - Flow Chart
Figure 18 - Annotated flow chart
Figure 19 - min_spacing graph
Figure 20 - iter_window_len graph
Figure 21 - window_length graph
Figure 22 - Improvements
TABLE Index | Improvement | Difficulty of implementation | impact
1|
Improvement: Fix BPM error adjustment
Difficulty: Not difficult. Alternative methods have already been suggested in the Error Detection and AdjustmentITALICS section.
Impact: High. The error bounds for systematic error exceeded 10% of the BPM.
2|
Improvement: Record the actual time of heart beats so that more accurate measures of quality can be implemented.
Difficulty: Depending on the amount of available data (or the availability relevant established devices), this could be very time consuming.
Impact: High. As the results displayed in Testing ResultsITALICS suggest, a more accurate measure of quality is required.
3|
Improvement: Allow the selection of methods to vary depending on the data. Currently only benchmarks are adjusted as a function of average voltstamps.
Difficulty: Implementing this improvement may be challenging as it would require the code to distinguish between different data sets in order to select an appropriate method.
Impact: Small. Theoretically data from all users should be somewhat similar (even though there are differences in the duration of beats).
4|
Improvement: Decrease run time of the testing algorithm.
Difficulty: Some improvements could be easily implemented. The dense iteration for example, computed the BPM for each window even though only one data point changed.
Impact: High. A faster algorithm would allow for the testing of more combinations of methods and constants.
5|
Improvement: Refrain from using similar data and window length.
Difficulty: Depending on the run time of the algorithm, this could be simple to implement.
Impact: Small. An effective quality measure should work for any window size greater than two seconds.
Figure 23 - Mean inspiratory flow
Figure 24 - Nice heart rate graph(s)
Figure 25 - breathing graphs
Figure 26 - Best breathing graphs
Figure 27 - Normal distribution graph
Figure 28 - testing of 10 patients method
TABLE Index | Comparing to | Comparing to ranking | method ranking
1|
comparing to: Heart rate(lowest wins)
ranking: alec, kostas, sue, jan, filip
method ranking: Alec, Filip/Sue, Jan, Kostas
2|
comparing to: Maximum speed in test
ranking: filip, kostas, jan, alec, sue
method ranking: Alec, Filip/Sue, Jan, Kostas
3|
comparing to: personal judgement
ranking: alec, filip, jan, kostas, sue
method ranking: Alec, Filip/Sue, Jan, Kostas
Calculation 1 - Error for my bad error adjustment

Calculation 2 - Error for BPM as measurement function

Appendix 1 - Data Used
Appendix 2 - Phase 1 Results
Appendix 3 - Phase 2 a and b Results
Appendix 4 - Phase 3 a,b and c Results
Appendix 5 - RESpeck data sample
