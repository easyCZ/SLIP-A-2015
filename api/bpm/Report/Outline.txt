Things to put in my report

A) Intro
SEMI	1) Background on our project and what I was responsible for. I worked on the ECG and with the RESpeck PERHAPS OMIT. NEED TO ADD STUFF ON RESpeck

B) ECG
	1) Scope of work GRAPH - this section should cover how my part fits in with the rest
CHECK		a) find bpm
CHECK		b) moving window (0-10 seconds)
CHECK		c) JSON file dictionary {'timestamp':volts} CHECK
CHECK		d) return BPM CHEKC
Not necessary	e) BPMServices intro
SEMI		f) challenge: density of data poinst (sparsity and variation) ADD AVG DENSITY or average spacing AND ADD VARIANCE-ish thing
	2) Method
CHECK		a) Overview
CHECK			i) overview of BPM code
DIAGRAMS	b) step structure
CHECK			i) step structure intro
CHECK				-> why the step structure?
CHECK					- background: get_peaks
CHECK					- purpose: freedom to let computation give solution where I am unable (because there is too much data for me to parse manually)
CHECK					- purpose: possible to build on code with increasing amounts of available data
DIAGRAMS		ii) the actual structure
CHECK				-> What do the individual steps do and how/why does the format of data change throughout? GRAPHS to illustrate format and how we go from data to bpm
CHECK					- individual steps no prob
to be done				- list vs dictionary. consistency throughout (PROS allows me to have fewer functions, more natural way of formatting, sometimes faster. CONS sometimes slower, frequent sorting)
DIAGRAMS		iii) table of all available methods GRAPH
maybe				-> explain trivial case of all zeros
to be done			-> which one was deemed best. Testing provides detailed information.
		c) BPM function
SEMI			i) theory behind extrapolation to 60 seconds -> task: find times when beats occur GRAPH no graph done
DIAGRAMS		ii) error detection factor GRAPH
CHECK			c) Error detection
SEMI				i) error associated with my bad decision need to make calculations section 
CHECK				i) Detecting zeros and extreme variance (at_risk)
CHECK					-> detecting zeros gives me BS factor - logical to discard zreos because it implies that it is out of range and data is incomplete.
CHECK					-> allows to adjust BPM to fair value
CHECK				ii) Extreme variance is a warning that the data is fishy, but has not been elaborated or tested sufficiently due to time constraints.
to be done		iii) actual function name and code
		d) Testing
			i) introduction to testing
SEMI				-> what am I wanting to test - find best setting, how well does my code recognise error data?, impact of window length, per100 factor. NO MENTION OF ERROR RECOGNITION
			ii) 'Testing environment'
DIAGRAMS			-> Take set of methods, generate function that maps this set to a quality set (MATHS and GRAPH)
CHECK				-> My quality set is going to be of a finite size. In my testing, I determine the size of it and then choose the most largest amount of reasonable settings I can.
CHECK				-> choose setting with highest accuracy
CHECK				-> specs - passing setting, receiving measure of quality, saving measure of quality to CSV. seperate place. emulate moving window.
DIAGRAMS			-> graphical format for what i have created to match specs GRAPH
CHECK				-> emulator
DIAGRAMS			-> Setting -> BPMServices -> local.py -> CSV/command prompt   GRAPH
SEMI				-> What exactly did Setting and BPMServices objects contain and why? GRAPH NO WHY YET!
			iii) Measuring Quality - How do I determine the quality of my BS detector and a setting
CHECK				-> refer to sets. 
not necessary			-> Quick intro listing methods considered and what my specs were. It's more about the accuracy of the beats than the BPM. We are really trying to find a method that detects how close we are to the actual beats.
not necessary			-> BPM - no error in function, rather carries error through. Note: not saying it would always give 60 sec result, but for any particular window, that measurement is correct (ignoring trends of course) (assumptions: flat heart rate for that window(how does that influence GRAPH and MATH sort of average(work it out))
CHECK				-> number of beats in window
CHECK					- CON completely inaccurate GRAPH
CHECK				-> difference between true BPM and actual BPM
CHECK					-> no ripple from BPM
CHECK					-> PRO requires semi even spacing - DIAGRAM and MATH to explain how accurate this is
CHECK					-> CON does not require correct number of beats because edges are removed, however it does require the correct number of beats in middle. DIAGRAM REF_CODE
CHECK					-> PRO with small window size, this error starts being recorded because windows are too small to ignore edges and still have BPM (if only 3 true beats in window, then ignoring the a beat on either side would leave only 1 beat) DIAGRAM
CHECK					-> Pro with large window size. if no detection on side, then eventually no detection in middle. => that it will also be detected DIAGRAM
CHECK					-> CON fluctuations in BPM
CHECK				-> difference between beat times and actual beat times as well as number of beats and number of actual beats
CHECK					- PRO detects uneven spacing
not necessary				- PRO detects number of beats
CHECK					- PRO MOST ACCURATE METHOD
CHECK					- CON infeasible, because there is too much manual work (even though it was used in the generation of methods)
CHECK				-> quick conclusion saying which ones I've considered and which ones I've chosen
maybe					-TABLE(Detects uneven spacing, detects number of beats, implementation and Manual Work)
				-> criticsm of measure of quality
					- in reality back to back windows were chosen for testing, so there is more room for error
CHECK					- different weights for different violations QUANTIFY - remember that they vary with window size
CHECK						- shift of 1 beat - what about multiple? - what about during the back to back window testing
CHECK						- ommission of 1 beat - what about multiple? - what about during the back to back window testing
CHECK						- addition of 1 beat - what about multiple? - what about during the back to back window testing 
			iv) Given a setting, what is my testing algorithm?
CHECK				-> a.k.a. what is the actual function that maps settings to quality measure set?
CHECK				-> loop over reasonable data
CHECK				-> back to back windows because otherwise it would be too expensive (massive improvement possibility here)
not necessery			-> for each window compare BPM to actual BPM
CHECK					- take average
CHECK					- we can expect some fluctuation here, how much (changing with window size,consider roy,myself and hayden)?
CHECK				-> print results to CSV
				-> CODE and DIAGRAMS to help explain
MAKE SURE 		v) Testing procedure (which settings did I test etc.?)
TO GET VARIANCE TOO		-> testing limitations 
CHECK					- per window of size 200 0.017 seconds
CHECK					- set my limit at 24 h run time, leaving me ca. 5,000,000 windows to evaluate
CHECK					- narrow down to how many different settings I can test. OBVIOUSLY NOT ENOUGH TO TEST COMPLETE SETTING
				-> Testing flow chart GRAPH
DIAGRAMS				- justify why some were kept and others weren't
CHECK					- Flow chart is clearly imperfect. Huge logical gap by testing one after another as it prevents many potentially effective combinations. I am limiting myself to methods that work reasonably well with the given setting.
CHECK					- not sure which methods were going to be successful, I have a decent feeling regarding benchmarks, iter_window, min_spacing and window_length. also would only be able to test very few methods
					- Even better feeling for iter_window, window_length and min_spacing. 
CHECK						+ difference due to min_spacing is practically negligible between 0.25 sec and 0.33 sec
CHECK						+ methods should ideally work for as small a window length as possible so 200 (X sec) was a good benchmark to use.
CHECK						+ iter_window - HELP
			vi) Testing results
DIAGRAMS			-> Moving through the flow chart to identify best methods, benchmarks and other settings
CHECK					- results from round 1,2 and 3 - CSV
CHECK				-> display of optimal method
	3) Improvements
CHECK		a) provided a good programming environment and framework for testing, but the actual methods need improvement. Phase three things pointed out problems. confirmed by quality test.
CHECK		b) TABLE with all improvements, feasibility, implementation difficulty, judged scale of impact.
CHECK			i) window_movement improvement
CHECK			ii) quicker code and computer for less flawed testing method
CHECK			iii) use an established device to record actual beat times so that the quality measure function can be improved
CHECK			iv) make method selection more dependent on data. at the moment only benchmarks vary.
not necessary		v) expand on logical choices for step1 methods. create hierarchies etc...
CHECK			vi) error in BPM on outside shouldn't be counted but is at the moment
CHECK			viii) tested towards a particular window length
C) RESpeck
INTERIM	1) Intro
		a) monitoring of our health is gaining importance(with good reason) and just measuring the breathing, temperature and BPM of people during the day would provide useful data to research. Obviously, we would like to provide services to users as well.
			- FEV1 vs predicted - trying to see if we can predict FEV1 or just breathing in general. first step in that direction. also might be good indicator of health in itself.
				+ outline experiment
			- looking at a method to rank users' respiratory fitness (in recovery from exercise)
				+ quick intro to COPD patient experiment.
INTERIM	2) My experiment - try to elaborate a little bit more on this. I have to prove to DK that not following his exact instruction was warranted.
		a) intro
			i) Want to figure out how mean inspiratory flow is related to heart rate in recovery after exercise. This has multiple purposes:
			ii) FEV1 to predicted (predictable using bpm?) as an indicator of respiratory disease
		b) Method / procedure
			i) describe procedure in detail and provide justification for lying down etc...
		c) Results
			i) GRAPHS
			ii) correlation between BPM and flow
INTERIM	3) COPD patients - trying to keep this brief
		a) trying to guess a formula for fitness
		b) data
		c) method
		d) test on my crowd
		e) conclusion
D) Conclusion and recap

search these (in report) before submissions:
ITALICS
HELP
level and/or heading
REFORMAT
FOR TABLE
benchmarks - bad use of word

search these (in outline) before submissions:
SEMI
DIAGRAMS
to be done
maybe
not necessary